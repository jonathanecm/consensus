flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, substitute())
plot(cars)
plot(cars)
plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
load(mtcars)
library(mtcars)
library(mtcars)
mtcars
data("mtcars")
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data mtcars)
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
mtcars
mpg
library(tidyverse)
mpg
ggplot(mpg, aes(hwy, cyl)) + geom_point()
library(XML)
?xmltreeparse
?xmlTreeParse
url <- "http://www.w350hools.Com/me/simple.xml"
paserd <- xmlTreeParse(url, useInternalNodes = TRUE)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url, useInternalNodes = TRUE)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url, useInternalNodes = TRUE)
paserd <- xmlTreeParse(url)
url <- "http://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url)
paserd <- xmlTreeParse(url)
url <- "http://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url)
paserd <- xmlTreeParse(url, useInternal = TRUE)
url <- "http://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url, useInternal = TRUE)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url, useInternal = TRUE)
paserd <- xmlTreeParse(url, useInternal = TRUE, method = "curl")
paserd <- xmlTreeParse(url)
paserd <- xmlTreeParse(file = url)
url <- "http://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(file = url)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(file = url)
library(xml2)
paserd <- xmlTreeParse(file = url)
xmlTreeParse(url)
url
paserd <- xmlTreeParse(file = url)
url <- "http://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(file = url)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(file = url)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(file = url)
paserd <- xmlTreeParse(file = url, isURL = TRUE)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url, isURL = TRUE)
library(xml2)
the_url <- ss$ws$listfeed[index]
library(httr)
url get(url)
url <- get(url)
url <- "https://www.w3schools.com/xml/simple.xml"
url <- get(url)
url <- read_html(url)
url
paserd <- xmlTreeParse(url, isURL = TRUE)
paserd <- xmlTreeParse(url)
paserd <- xmlTreeParse(url, useInternalNodes = )
paserd <- xmlTreeParse(url, useInternalNodes = TRUE)
url
doc <- xmlRoot(url)
url <- "https://www.w3schools.com/xml/simple.xml"
paserd <- xmlTreeParse(url, useInternalNodes = TRUE)
doc <- xmlTreeParse(sub("s", "", url), useInternal = TRUE)
url <- "https://www.w3schools.com/xml/simple.xml"
file <- xmlParse(url)
url <- "https://www.w3schools.com/xml/simple.xml"
file <- xmlParse(url)
library(RCurl)
file getURL(url)
file <- getURL(url)
parsed_xml <- xmlParse(file)
parsed_xml
rootNode[1]
root <- xmlRoot(file)
root <- xmlRoot(file)
file <- getURL(url)
parsed <- xmlParse(file)
root <- xmlRoot(parsed)
root
?xmlRoot
xmlName(root)
root
names(root)
root[[1]]
root[[1]][[2]]
xmlSApply(root, xmlValue)
roor
root
xpathSApply(root, "//name", xmlValue)
xpathSApply(root, "//price", xmlValue)
fileUrl <- "http://www.espn.com/nfl/team/schedule/_/name/bal/year/2016"
doc <- htmlTreeParse(fileUrl, useInternalNodes = TRUE)
scores <- xpathSApply(doc, "//div[@class='score'", xmlValue)
scores
scores <- xpathSApply(doc, "//div[@class='score'", xmlValue)
scores
scores <- xpathSApply(doc, "//div[@class='score']", xmlValue)
scores
scores
fileUrl <- "http://www.espn.com/nfl/team/schedule/_/name/bal/year/2016"
doc <- htmlTreeParse(fileUrl, useInternalNodes = TRUE)
scores <- xpathSApply(doc, "//div[@class='score']", xmlValue)
scores
score <- xpathSApply(doc,"//li[@class='score']", xmlValue)
scores
score
score <- xpathSApply(doc,"//li[@class='score']", xmlValue)
team <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
team
install.packages(c("bindr", "bindrcpp", "broom", "callr", "cluster", "curl", "DBI", "hms", "httpuv", "lubridate", "maps", "MASS", "Matrix", "nlme", "openssl", "pillar", "plogr", "psych", "Rcpp", "rmarkdown", "rpart", "selectr", "stringi", "survival", "tidyselect", "tidytext", "tinytex", "tokenizers", "viridis", "withr", "XML", "yaml"))
# JSON
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData
class(jsonData)
jsonData
names(jsonData)
names(jsonData$owner)
?toJSON
myjson <- toJSON(iris, pretty = T)
?cat
print(myjson)
cat(myjson)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.1.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size = size - 1000, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran,
| avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
swirl()
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
?
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors, 6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flag, unique)
sapply(flags, unique)
lapply(unique_vals, funtion(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(by_package, mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
viewinfo(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
load("~/Github/consensus/scripts/Europe_PMC_API/pvalue_search.RData")
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
pvalue_search = read.table("scripts/pvalue_search_csv.csv")
pvalue_search = read.table("scripts/Europe_PMC_API/pvalue_search_csv.csv")
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
pvalue_search = read.table("scripts/Europe_PMC_API/pvalue_search_csv.csv")
pvalue_search = read.table("/scripts/Europe_PMC_API/pvalue_search_csv.csv")
getwd()
setwd("~/Github/consensus")
pvalue_search = read.table("/scripts/Europe_PMC_API/pvalue_search_csv.csv")
pvalue_search = read.table("/scripts/Europe_PMC_API/pvalue_search_csv.csv")
pvalue_search = read.table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
pvalue_search = read.table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
library(tidyverse)
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
load("~/Github/consensus/scripts/Europe_PMC_API/pvalue_search.RData")
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
library(europepmc)
library(tidyverse)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
save(datalist, file = "pvalue_search.RData")
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
print(body(epmc_search))
# Libraries
library(europepmc)
print(body(epmc_search))
# Initializes empty dataframe and methods value.
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
# Initializes list.
datalist = list()
print(method)
print(method)
# Extracts data according to parameters.
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
load("~/Github/consensus/scripts/Europe_PMC_API/pvalue_search.RData")
View(restpmc)
load("~/Github/consensus/scripts/Europe_PMC_API/pvalue_search.RData")
View(datalist)
View(datalist)
View(datalist)
View(datalist)
# This script call the Europe PMC API and extracts p-values can be modified for download tween with
# different searching features, parameters, and dates to download tweets.
#
# Searching parameters:
# - venezuela cambio
# - venezuela gobierno
# - venezuela politica
# - venezuela trancision
##############################################################################
# Libraries
library(europepmc)
library(tidyverse)
# Sets up the parameters for the function epmc_search.
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
# Check the parameters were set-up correctly,
#print(body(epmc_search))
# Initializes empty dataframe and methods value.
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
# Initializes list.
datalist = list()
# Extracts data according to parameters.
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
#### Script for Extracting P-values from Europe PMC ##########################
#
# This script call the Europe PMC API and extracts p-values can be modified for download tween with
# different searching features, parameters, and dates to download tweets.
#
# Searching parameters:
# - venezuela cambio
# - venezuela gobierno
# - venezuela politica
# - venezuela trancision
##############################################################################
# Libraries
library(europepmc)
library(tidyverse)
# Sets up the parameters for the function epmc_search.
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
# Check the parameters were set-up correctly,
#print(body(epmc_search))
# Initializes empty dataframe and methods value.
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
# Initializes list.
datalist = list()
# Extracts data according to parameters.
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
#### Script for Extracting P-values from Europe PMC ##########################
#
# This script call the Europe PMC API and extracts p-values can be modified for download tween with
# different searching features, parameters, and dates to download tweets.
#
# Searching parameters:
# - venezuela cambio
# - venezuela gobierno
# - venezuela politica
# - venezuela trancision
##############################################################################
# Libraries
library(europepmc)
library(tidyverse)
# Sets up the parameters for the function epmc_search.
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
# Check the parameters were set-up correctly,
#print(body(epmc_search))
# Initializes empty dataframe and methods value.
pvalue_search = read_table("./scripts/Europe_PMC_API/pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
# Initializes list.
datalist = list()
# Extracts data according to parameters.
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
print(datalist)
View(pvalue_search)
View(pvalue_search)
jstore = read_xls("./data/journals.xls")
library(readxl)
library(stringi)
detach("package:europepmc", unload=TRUE)
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
install.packages(c("callr", "data.table", "DBI", "dplyr", "europepmc", "foreign", "ggrepel", "htmlwidgets", "httpuv", "leaflet", "MASS", "modelr", "pillar", "psych", "purrr", "Rcpp", "readxl", "rlang", "shiny", "slam", "sm", "sourcetools", "stringi", "stringr", "survival", "tidyr", "tidytext", "utf8", "XML", "yaml"))
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
jstore = read_xls("./data/journals.xls")
