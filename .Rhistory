geom_line(aes(x1, pred))
ggplot(grid) +
geom_line(aes(x1, pred))
ggplot(grid) +
geom_line(aes(x1, pred, color = x2))
ggplot(grid) +
geom_line(aes(x1, pred, color = x2, group = x2))
?geom_line
?group
grid
ggplot(grid) +
geom_line(aes(x1, pred, color = x2, group = x2)) +
facet_wrap(` model)
ggplot(grid) +
geom_line(aes(x1, pred, color = x2, group = x2)) +
facet_wrap(` model)
ggplot(grid) +
geom_line(aes(x1, pred, color = x2, group = x2)) +
facet_wrap(~ model)
grid %>% ggplot(aes(x2, pred, color = x1)) +
geom_line() +
facet_grid(~ model)
grid %>% ggplot(aes(x2, pred, color = x1, group = x1)) +
geom_line() +
facet_grid(~ model)
c <- "2010-10-10"
library(tidyverse)
library(tidyverse)
library(modelr)
guess_parser(c)
parse_guess(c)
str(parse_guess(c))
class(str(parse_guess(c)))
table4b
table4b
table4a
table4b
stocks
who
load("~/Github/.RData")
chicago <- readRDS("~/Github/Coursera-Classes/Data-Science/Getting-and-Cleaning-Data/Week 3/chicago.rds")
# Coursera Data Science Specialization
# Getting and Cleaning Data Course
# Week 4, Assigment (run_analysis.R script: Tiding a dataset)
## Packages.
### The following packages will be automatically loaded into R, but it must be pre-installed in R.
library(dplyr) # This library provides a flexible grammar of data manipulation.
## Getting the datasets.
### Checks if the directory exist, otherwise, creates a directory for the dataset.
if (!dir.exists("./Data")) {dir.create("./Data")}
### Downloads, saves, and unzips the dataset into the directory "Data".
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, destfile = "./Data/UCIHARDataset.zip", method = "curl")
date_downloaded <- Sys.Date()
unzip("./Data/UCIHARDataset.zip", exdir = "./Data/")
### Reads the files into R.
#### Label of the activities
activity_labels <- read.table("./Data/UCI HAR Dataset/activity_labels.txt")
#### Variables names or features names.
features <- read.table("./Data/UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)
#### Subjects in test grup that performed activites measured.
subject_test <- read.table("./Data/UCI HAR Dataset/test/subject_test.txt")
#### Data frame of test Measurement.
X_test <- read.table("./Data/UCI HAR Dataset/test/X_test.txt")
#### Activity codes for test data frame.
Y_test <- read.table("./Data/UCI HAR Dataset/test/Y_test.txt")
#### Subjects in train grup that performed activites measured.
subject_train <- read.table("./Data/UCI HAR Dataset/train/subject_train.txt")
#### Data frame of train Measurement.
X_train <- read.table("./Data/UCI HAR Dataset/train/X_train.txt")
#### Activity codes for train data frame.
Y_train <- read.table("./Data/UCI HAR Dataset/train/Y_train.txt")
## Data Transformations.
### 1) Merges the training and the test sets to create one dataset.
features_vector <- bind_rows(X_test, X_train)
### 1.1) Merges the subject_test and subject_train sets into one.
subjects <- bind_rows(subject_test, subject_train)
### 1.2) Merges the activities codes, from the test and train sets, into one.
activity_codes <- bind_rows(Y_test, Y_train)
### Adding names to the sets.
names(subjects) <- c("subject")
names(activity_codes) <- c("activityId")
names(activity_labels) <- c("activityId", "activity")
names(features_vector) <- features$V2
features_data <- bind_cols(subjects, activity_codes, features_vector)
### 2) Extracts only the measurements on the mean and standard deviation for each measurement.
#### 2.1) Removes duplicated features of variables.
features_data <- features_data[!duplicated(names(features_data))]
#### 2.2) Extracts only the measurements names from the features vector.
extracted_measurements <- features$V2[grep("mean\\(\\)|std\\(\\)", features$V2)]
#### 2.3) Extracts only the measurements on the mean and standard deviation for each measurement.
dataset <- subset(features_data, select = c(extracted_mean_sdv_names, "subject", "activityId"))
### 3) Uses descriptive activity names to name the activities in the data set
dataset <- left_join(dataset, activity_labels, by = "activityId")
dataset <- dataset[-68]
### 4) Appropriately labels the data set with descriptive variable names.
names(dataset) <- gsub("^t", "time", names(dataset))
names(dataset) <- gsub("^f", "frequency", names(dataset))
names(dataset) <- gsub("Acc", "Accelerometer", names(dataset))
names(dataset) <- gsub("Gyro", "Gyroscope", names(dataset))
names(dataset) <- gsub("Mag", "Magnitude", names(dataset))
names(dataset) <- gsub("BodyBody", "Body", names(dataset))
names(dataset) <- gsub("std", "StandardDeviation", names(dataset))
ggplot2::ggplot(aes(cars, hwy, cyl)) + geom_point()
library(ggplot2)
ggplot(aes(cars, hwy, cyl)) + geom_point()
ggplot(cars, aes(cars, hwy, cyl)) + geom_point()
ggplot(cars, aes(hwy, cyl)) + geom_point()
ggplot(cars, aes(hwy, cyl)) + geom_point()
str(cars)
mtcars
cars
mpg
clar
ggplot(mpg, aes(hwy, cyl)) + geom_point()
ggplot(mpg, aes(class, drv)) + geom_point()
mpg
ggplot(mpg, aes(displ, hwy, color = class)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth()
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth(data = filter(class = 'subcompact'))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth(data = filter(class == 'subcompact'))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth(mpg, data = filter(class == 'subcompact'))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth(data = filter(mpg, class == 'subcompact'))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth(data = filter(mpg, class == 'subcompact'))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class)) + geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == 'subcompact'),
se = FALSE
)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"),
se = FALSE
)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
geom_point(aes(color = class)) +
data = filter(mpg, class == 'compact')
data
data
geom_point(aes(color = class)) +
data = filter(mpg, class == 'compact')
data
geom_point(aes(color = class)) +
data <-  filter(mpg, class == 'compact')
data
geom_point(aes(color = class)) +
filter(mpg, class == 'compact')
geom_point(aes(color = class)) +
filter(mpg, (class == "compact")))
geom_point(aes(color = class)) +
filter(mpg, (class == "compact"))
mpg
geom_point(aes(color = class)) +
filter(mpg, (class == "compact"))
library(tidyverse)
geom_point(aes(color = class)) +
filter(mpg, (class == "compact"))
geom_point(aes(color = class)) +
filter(mpg, (class == "compact"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "knitr", "lubridate", "MASS", "nlme", "openssl", "pryr", "rlang", "rpart", "stringr", "tidytext", "XML"))
install.packages(c("MASS", "mgcv", "nlme", "rpart"))
install.packages(c("MASS", "rpart"))
install.packages(c("MASS", "rpart"))
install.packages("MASS")
geom_point(aes(color = class)) +
filter(mpg, (class == "compact"))
geom_point(aes(color = class)) +
filter(mpg, (class == "compact"))
filter(mpg, (class == "compact"))
library(tidyverse)
filter(mpg, (class == "compact"))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = filter(mpg, class == "compact"),
se = FALSE) +
geom_point(aes(color = class))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = filter(mpg, class == "subcompact"),
se = FALSE) +
geom_point(aes(color = class))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = filter(mpg, class == "subcompact"),
se = FALSE, color = "red") +
geom_point(aes(color = class))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = filter(mpg, class == "subcompact"),
se = FALSE, color = "purple") +
geom_point(aes(color = class))
library(europepmc)
install.packages("europepmc")
print(body(epmc_search))
library(europepmc)
print(body(epmc_search))
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits=1)
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
methods <- as.character(pvalue_search$V1)
datalist = list()
datalist
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method=sprintf("METHODS:%%22%s%%22",i)
restpmc=epmc_search(method, output = 'id_list', limit=5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
method = sprintf("METHODS:%%22%s%%22",i)
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = epmc_search(method, output = 'id_list', limit=5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
print(body(epmc_search))
body(epmc_search)[[11]]
print(body(epmc_search))
body(epmc_search)[[11]]
?substitute
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
datalist = list()
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits=1)
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
setwd("~/Github/consensus")
pvalue_search = read.table("pvalue_search_csv.csv")
methods<-as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method=sprintf("METHODS:%%22%s%%22",i)
restpmc=epmc_search(method, output = 'id_list', limit=5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
print(body(epmc_search))
print(body(epmc_search))
method
pvalue_search
pvalue_search$V1
methods <- as.character(pvalue_search$V1)
methods
print(i)
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
print(i)
restpmc = epmc_search(method, output = 'id_list', limit = 5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
print(method)
print(i)
restpmc = epmc_search(method, output = 'id_list', limit = 5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
method = sprintf("METHODS:%%22%s%%22",i)
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
print(method)
print(i)
restpmc = epmc_search("Lagotto Romagnolo", output = 'id_list', limit = 5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
restpmc = epmc_search("Lagotto Romagnolo", output = 'id_list', limit = 5000)
tt_oa <- europepmc::epmc_hits_trend("Malaria", period = 1995:2016, synonym = FALSE)
tt_oa
europepmc::epmc_search("Lagotto Romagnolo")
europepmc::epmc_search("Lagotto Romagnolo")
test <- europepmc::epmc_search("Lagotto Romagnolo")
test
epmc_search?
?epmc_search
restpmc = epmc_search("Lagotto Romagnolo", limit = 10)
)
restpmc = epmc_search("Lagotto Romagnolo")
restpmc = europepmc::epmc_search("Lagotto Romagnolo")
restpmc = epmc_search_("Lagotto Romagnolo")
restpmc = europepmc::epmc_search("Lagotto Romagnolo", output = 'id_list', limit = 5000)
restpmc
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search("Lagotto Romagnolo", output = 'id_list', limit = 5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
restpmc
restpmc = europepmc::epmc_search(method, output = 'id_list', limit = 5000)
restpmc
datalist
method
methods
methods <- as.character(pvalue_search$V1)
methods
pvalue_search
restpmc
datalist
print(method)
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, limit = 5000)
datalist[[i]] <- restpmc$pmid
print(method)
}
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, limit = 5)
datalist[[i]] <- restpmc$pmid
print(method)
}
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, limit = 5)
datalist[[i]] <- restpmc$pmid
print(method)
}
restpmc
glimpse(restpmc)
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = 'id_list', limit = 10)
datalist[[i]] <- restpmc$pmid
print(method)
}
datalist
restpmc
restpmc = europepmc::epmc_search(method, limit = 10)
restpmc
glimpse(restpmc)
pvalue_search
restpmc = europepmc::epmc_search("statistical", limit = 10)
restpmc
glimpse(restpmc)
pvalue_search
restpmc = europepmc::epmc_search("statistical+significance", limit = 10)
glimpse(restpmc)
restpmc$title
print(method)
method
for(i in methods[1:1]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, limit = 10)
datalist[[i]] <- restpmc$pmid
print(method)
}
method
restpmc = europepmc::epmc_search("METHODS:%22p-value%22", limit = 10)
restpmc
glimpse(restpmc)
restpmc$title
restpmc
filter(restpmc, title, pmcid)
filter(restpmc, title:pmcid)
select(restpmc, title, pmcid)
for(i in methods[1:1]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, limit = 10)
datalist[[i]] <- restpmc$pmid
print(method)
}
restpmc
select(restpmc, title, pmcid)
restpmc = europepmc::epmc_search(method, output = id_list, limit = 10)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 10)
for(i in methods[1:1]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 10)
datalist[[i]] <- restpmc$pmcid
print(method)
}
datalist
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 10)
datalist[[i]] <- restpmc$pmcid
print(method)
}
datalist
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 10)
datalist[[i]] <- restpmc$pmcid
print(method)
}
save(datalist, file="pvalue_search.RData")
load("~/Github/consensus/pvalue_search.RData")
pvalue_search
load("~/Github/consensus/pvalue_search.RData")
View(pvalue_search)
load("~/Github/consensus/pvalue_search.RData")
View(pvalue_search)
datalist
View(pvalue_search)
View(epmc_search)
load("~/Github/consensus/pvalue_search.RData")
View(datalist)
datalist
print(method)
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 10)
datalist[[i]] <- restpmc$pmcid
print(method)
}
restpmc
library(europepmc)
print(body(epmc_search))
body(epmc_search)[[11]] <- substitute(if (hits == 0) hits = 1)
print(body(epmc_search))
pvalue_search = read.table("pvalue_search_csv.csv")
methods <- as.character(pvalue_search$V1)
datalist = list()
for(i in methods[1:4]){
method = sprintf("METHODS:%%22%s%%22",i)
restpmc = europepmc::epmc_search(method, output = "id_list", limit = 5000)
datalist[[i]] <- restpmc$pmcid
print(method)
}
datalist
